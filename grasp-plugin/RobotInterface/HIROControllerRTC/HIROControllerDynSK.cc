// This file is generated by omniidl (C++ backend) - omniORB_4_1. Do not edit.

#include "HIROController.hh"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_1_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::PR_structMember _0RL_structmember_CommonCommands_mRETURN__ID[] = {
  {"id", CORBA::TypeCode::PR_long_tc()},
  {"comment", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)}
};

#ifdef _0RL_tc_CommonCommands_mRETURN__ID
#  undef _0RL_tc_CommonCommands_mRETURN__ID
#endif
static CORBA::TypeCode_ptr _0RL_tc_CommonCommands_mRETURN__ID = CORBA::TypeCode::PR_struct_tc("IDL:CommonCommands/RETURN_ID:1.0", "RETURN_ID", _0RL_structmember_CommonCommands_mRETURN__ID, 2, &_0RL_tcTrack);

const CORBA::TypeCode_ptr CommonCommands::_tc_RETURN_ID = _0RL_tc_CommonCommands_mRETURN__ID;


const CORBA::TypeCode_ptr _tc_CommonCommands = CORBA::TypeCode::PR_interface_tc("IDL:CommonCommands:1.0", "CommonCommands", &_0RL_tcTrack);

static CORBA::TypeCode_ptr _0RL_tc_MotionCommands_mHgMatrix = CORBA::TypeCode::PR_alias_tc("IDL:MotionCommands/HgMatrix:1.0", "HgMatrix", CORBA::TypeCode::PR_array_tc(3, CORBA::TypeCode::PR_array_tc(4, CORBA::TypeCode::PR_double_tc(), &_0RL_tcTrack), &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr MotionCommands::_tc_HgMatrix = _0RL_tc_MotionCommands_mHgMatrix;

static CORBA::TypeCode_ptr _0RL_tc_MotionCommands_mDoubleSeq = CORBA::TypeCode::PR_alias_tc("IDL:MotionCommands/DoubleSeq:1.0", "DoubleSeq", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_double_tc(), &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr MotionCommands::_tc_DoubleSeq = _0RL_tc_MotionCommands_mDoubleSeq;

static CORBA::TypeCode_ptr _0RL_tc_MotionCommands_mJointPos = CORBA::TypeCode::PR_alias_tc("IDL:MotionCommands/JointPos:1.0", "JointPos", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_double_tc(), &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr MotionCommands::_tc_JointPos = _0RL_tc_MotionCommands_mJointPos;

static CORBA::TypeCode_ptr _0RL_tc_MotionCommands_mJointPosSeq = CORBA::TypeCode::PR_alias_tc("IDL:MotionCommands/JointPosSeq:1.0", "JointPosSeq", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_MotionCommands_mJointPos, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr MotionCommands::_tc_JointPosSeq = _0RL_tc_MotionCommands_mJointPosSeq;

static CORBA::TypeCode_ptr _0RL_tc_MotionCommands_mULONG = CORBA::TypeCode::PR_alias_tc("IDL:MotionCommands/ULONG:1.0", "ULONG", CORBA::TypeCode::PR_ulong_tc(), &_0RL_tcTrack);


const CORBA::TypeCode_ptr MotionCommands::_tc_ULONG = _0RL_tc_MotionCommands_mULONG;

static CORBA::PR_structMember _0RL_structmember_MotionCommands_mCarPosWithElbow[] = {
  {"carPos", _0RL_tc_MotionCommands_mHgMatrix},
  {"elbow", CORBA::TypeCode::PR_double_tc()},
  {"structFlag", _0RL_tc_MotionCommands_mULONG}
};

#ifdef _0RL_tc_MotionCommands_mCarPosWithElbow
#  undef _0RL_tc_MotionCommands_mCarPosWithElbow
#endif
static CORBA::TypeCode_ptr _0RL_tc_MotionCommands_mCarPosWithElbow = CORBA::TypeCode::PR_struct_tc("IDL:MotionCommands/CarPosWithElbow:1.0", "CarPosWithElbow", _0RL_structmember_MotionCommands_mCarPosWithElbow, 3, &_0RL_tcTrack);

const CORBA::TypeCode_ptr MotionCommands::_tc_CarPosWithElbow = _0RL_tc_MotionCommands_mCarPosWithElbow;


static CORBA::PR_structMember _0RL_structmember_MotionCommands_mRETURN__ID[] = {
  {"id", CORBA::TypeCode::PR_long_tc()},
  {"comment", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)}
};

#ifdef _0RL_tc_MotionCommands_mRETURN__ID
#  undef _0RL_tc_MotionCommands_mRETURN__ID
#endif
static CORBA::TypeCode_ptr _0RL_tc_MotionCommands_mRETURN__ID = CORBA::TypeCode::PR_struct_tc("IDL:MotionCommands/RETURN_ID:1.0", "RETURN_ID", _0RL_structmember_MotionCommands_mRETURN__ID, 2, &_0RL_tcTrack);

const CORBA::TypeCode_ptr MotionCommands::_tc_RETURN_ID = _0RL_tc_MotionCommands_mRETURN__ID;


const CORBA::TypeCode_ptr _tc_MotionCommands = CORBA::TypeCode::PR_interface_tc("IDL:MotionCommands:1.0", "MotionCommands", &_0RL_tcTrack);

static void _0RL_CommonCommands_mRETURN__ID_marshal_fn(cdrStream& _s, void* _v)
{
  CommonCommands::RETURN_ID* _p = (CommonCommands::RETURN_ID*)_v;
  *_p >>= _s;
}
static void _0RL_CommonCommands_mRETURN__ID_unmarshal_fn(cdrStream& _s, void*& _v)
{
  CommonCommands::RETURN_ID* _p = new CommonCommands::RETURN_ID;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_CommonCommands_mRETURN__ID_destructor_fn(void* _v)
{
  CommonCommands::RETURN_ID* _p = (CommonCommands::RETURN_ID*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const CommonCommands::RETURN_ID& _s)
{
  CommonCommands::RETURN_ID* _p = new CommonCommands::RETURN_ID(_s);
  _a.PR_insert(_0RL_tc_CommonCommands_mRETURN__ID,
               _0RL_CommonCommands_mRETURN__ID_marshal_fn,
               _0RL_CommonCommands_mRETURN__ID_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, CommonCommands::RETURN_ID* _sp)
{
  _a.PR_insert(_0RL_tc_CommonCommands_mRETURN__ID,
               _0RL_CommonCommands_mRETURN__ID_marshal_fn,
               _0RL_CommonCommands_mRETURN__ID_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, CommonCommands::RETURN_ID*& _sp)
{
  return _a >>= (const CommonCommands::RETURN_ID*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const CommonCommands::RETURN_ID*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_CommonCommands_mRETURN__ID,
                    _0RL_CommonCommands_mRETURN__ID_unmarshal_fn,
                    _0RL_CommonCommands_mRETURN__ID_marshal_fn,
                    _0RL_CommonCommands_mRETURN__ID_destructor_fn,
                    _v)) {
    _sp = (const CommonCommands::RETURN_ID*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_CommonCommands_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_CommonCommands_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(CommonCommands::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_CommonCommands_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, CommonCommands_ptr _o)
{
  CommonCommands_ptr _no = CommonCommands::_duplicate(_o);
  _a.PR_insert(_tc_CommonCommands,
               _0RL_CommonCommands_marshal_fn,
               _0RL_CommonCommands_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, CommonCommands_ptr* _op)
{
  _a.PR_insert(_tc_CommonCommands,
               _0RL_CommonCommands_marshal_fn,
               _0RL_CommonCommands_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = CommonCommands::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, CommonCommands_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(_tc_CommonCommands,
                    _0RL_CommonCommands_unmarshal_fn,
                    _0RL_CommonCommands_marshal_fn,
                    _0RL_CommonCommands_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (CommonCommands_ptr)_r->_ptrToObjRef(CommonCommands::_PD_repoId);
    else
      _o = CommonCommands::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_MotionCommands_mHgMatrix_marshal_fn(cdrStream& _s, void* _v)
{
  MotionCommands::HgMatrix_slice* _a = (MotionCommands::HgMatrix_slice*)_v;
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _s.marshal_byte_swap()) {
    _s.put_octet_array((_CORBA_Octet*)(_a),96,omni::ALIGN_8);
  }
  else 
#endif
  {
    _s.declareArrayLength(omni::ALIGN_8, 96);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 3; _0i0++){
      for (_CORBA_ULong _0i1 = 0; _0i1 < 4; _0i1++){
        _a[_0i0][_0i1] >>= _s;
      }
    }
  }

}
static void _0RL_MotionCommands_mHgMatrix_unmarshal_fn(cdrStream& _s, void*& _v)
{
  MotionCommands::HgMatrix_slice* _a = MotionCommands::HgMatrix_alloc();
  _s.unmarshalArrayDouble((_CORBA_Double*)(_a), 12);

  _v = _a;
}
static void _0RL_MotionCommands_mHgMatrix_destructor_fn(void* _v)
{
  MotionCommands::HgMatrix_slice* _a = (MotionCommands::HgMatrix_slice*)_v;
  MotionCommands::HgMatrix_free(_a);
}

void operator<<=(::CORBA::Any& _a, const MotionCommands::HgMatrix_forany& _s)
{
  MotionCommands::HgMatrix_slice* _v;
  if (!_s.NP_nocopy())
    _v = MotionCommands::HgMatrix_dup(_s);
  else
    _v = _s.NP_getSlice();

  _a.PR_insert(_0RL_tc_MotionCommands_mHgMatrix,
               _0RL_MotionCommands_mHgMatrix_marshal_fn,
               _0RL_MotionCommands_mHgMatrix_destructor_fn,
               _v);
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, MotionCommands::HgMatrix_forany& _s)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_MotionCommands_mHgMatrix,
                    _0RL_MotionCommands_mHgMatrix_unmarshal_fn,
                    _0RL_MotionCommands_mHgMatrix_marshal_fn,
                    _0RL_MotionCommands_mHgMatrix_destructor_fn,
                    _v)) {
    _s = (MotionCommands::HgMatrix_slice*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_MotionCommands_mDoubleSeq_marshal_fn(cdrStream& _s, void* _v)
{
  MotionCommands::DoubleSeq* _p = (MotionCommands::DoubleSeq*)_v;
  *_p >>= _s;
}
static void _0RL_MotionCommands_mDoubleSeq_unmarshal_fn(cdrStream& _s, void*& _v)
{
  MotionCommands::DoubleSeq* _p = new MotionCommands::DoubleSeq;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_MotionCommands_mDoubleSeq_destructor_fn(void* _v)
{
  MotionCommands::DoubleSeq* _p = (MotionCommands::DoubleSeq*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const MotionCommands::DoubleSeq& _s)
{
  MotionCommands::DoubleSeq* _p = new MotionCommands::DoubleSeq(_s);
  _a.PR_insert(_0RL_tc_MotionCommands_mDoubleSeq,
               _0RL_MotionCommands_mDoubleSeq_marshal_fn,
               _0RL_MotionCommands_mDoubleSeq_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, MotionCommands::DoubleSeq* _sp)
{
  _a.PR_insert(_0RL_tc_MotionCommands_mDoubleSeq,
               _0RL_MotionCommands_mDoubleSeq_marshal_fn,
               _0RL_MotionCommands_mDoubleSeq_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, MotionCommands::DoubleSeq*& _sp)
{
  return _a >>= (const MotionCommands::DoubleSeq*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const MotionCommands::DoubleSeq*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_MotionCommands_mDoubleSeq,
                    _0RL_MotionCommands_mDoubleSeq_unmarshal_fn,
                    _0RL_MotionCommands_mDoubleSeq_marshal_fn,
                    _0RL_MotionCommands_mDoubleSeq_destructor_fn,
                    _v)) {
    _sp = (const MotionCommands::DoubleSeq*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_MotionCommands_mJointPos_marshal_fn(cdrStream& _s, void* _v)
{
  MotionCommands::JointPos* _p = (MotionCommands::JointPos*)_v;
  *_p >>= _s;
}
static void _0RL_MotionCommands_mJointPos_unmarshal_fn(cdrStream& _s, void*& _v)
{
  MotionCommands::JointPos* _p = new MotionCommands::JointPos;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_MotionCommands_mJointPos_destructor_fn(void* _v)
{
  MotionCommands::JointPos* _p = (MotionCommands::JointPos*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const MotionCommands::JointPos& _s)
{
  MotionCommands::JointPos* _p = new MotionCommands::JointPos(_s);
  _a.PR_insert(_0RL_tc_MotionCommands_mJointPos,
               _0RL_MotionCommands_mJointPos_marshal_fn,
               _0RL_MotionCommands_mJointPos_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, MotionCommands::JointPos* _sp)
{
  _a.PR_insert(_0RL_tc_MotionCommands_mJointPos,
               _0RL_MotionCommands_mJointPos_marshal_fn,
               _0RL_MotionCommands_mJointPos_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, MotionCommands::JointPos*& _sp)
{
  return _a >>= (const MotionCommands::JointPos*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const MotionCommands::JointPos*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_MotionCommands_mJointPos,
                    _0RL_MotionCommands_mJointPos_unmarshal_fn,
                    _0RL_MotionCommands_mJointPos_marshal_fn,
                    _0RL_MotionCommands_mJointPos_destructor_fn,
                    _v)) {
    _sp = (const MotionCommands::JointPos*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_MotionCommands_mJointPosSeq_marshal_fn(cdrStream& _s, void* _v)
{
  MotionCommands::JointPosSeq* _p = (MotionCommands::JointPosSeq*)_v;
  *_p >>= _s;
}
static void _0RL_MotionCommands_mJointPosSeq_unmarshal_fn(cdrStream& _s, void*& _v)
{
  MotionCommands::JointPosSeq* _p = new MotionCommands::JointPosSeq;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_MotionCommands_mJointPosSeq_destructor_fn(void* _v)
{
  MotionCommands::JointPosSeq* _p = (MotionCommands::JointPosSeq*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const MotionCommands::JointPosSeq& _s)
{
  MotionCommands::JointPosSeq* _p = new MotionCommands::JointPosSeq(_s);
  _a.PR_insert(_0RL_tc_MotionCommands_mJointPosSeq,
               _0RL_MotionCommands_mJointPosSeq_marshal_fn,
               _0RL_MotionCommands_mJointPosSeq_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, MotionCommands::JointPosSeq* _sp)
{
  _a.PR_insert(_0RL_tc_MotionCommands_mJointPosSeq,
               _0RL_MotionCommands_mJointPosSeq_marshal_fn,
               _0RL_MotionCommands_mJointPosSeq_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, MotionCommands::JointPosSeq*& _sp)
{
  return _a >>= (const MotionCommands::JointPosSeq*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const MotionCommands::JointPosSeq*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_MotionCommands_mJointPosSeq,
                    _0RL_MotionCommands_mJointPosSeq_unmarshal_fn,
                    _0RL_MotionCommands_mJointPosSeq_marshal_fn,
                    _0RL_MotionCommands_mJointPosSeq_destructor_fn,
                    _v)) {
    _sp = (const MotionCommands::JointPosSeq*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_MotionCommands_mCarPosWithElbow_marshal_fn(cdrStream& _s, void* _v)
{
  MotionCommands::CarPosWithElbow* _p = (MotionCommands::CarPosWithElbow*)_v;
  *_p >>= _s;
}
static void _0RL_MotionCommands_mCarPosWithElbow_unmarshal_fn(cdrStream& _s, void*& _v)
{
  MotionCommands::CarPosWithElbow* _p = new MotionCommands::CarPosWithElbow;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_MotionCommands_mCarPosWithElbow_destructor_fn(void* _v)
{
  MotionCommands::CarPosWithElbow* _p = (MotionCommands::CarPosWithElbow*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const MotionCommands::CarPosWithElbow& _s)
{
  MotionCommands::CarPosWithElbow* _p = new MotionCommands::CarPosWithElbow(_s);
  _a.PR_insert(_0RL_tc_MotionCommands_mCarPosWithElbow,
               _0RL_MotionCommands_mCarPosWithElbow_marshal_fn,
               _0RL_MotionCommands_mCarPosWithElbow_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, MotionCommands::CarPosWithElbow* _sp)
{
  _a.PR_insert(_0RL_tc_MotionCommands_mCarPosWithElbow,
               _0RL_MotionCommands_mCarPosWithElbow_marshal_fn,
               _0RL_MotionCommands_mCarPosWithElbow_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, MotionCommands::CarPosWithElbow*& _sp)
{
  return _a >>= (const MotionCommands::CarPosWithElbow*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const MotionCommands::CarPosWithElbow*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_MotionCommands_mCarPosWithElbow,
                    _0RL_MotionCommands_mCarPosWithElbow_unmarshal_fn,
                    _0RL_MotionCommands_mCarPosWithElbow_marshal_fn,
                    _0RL_MotionCommands_mCarPosWithElbow_destructor_fn,
                    _v)) {
    _sp = (const MotionCommands::CarPosWithElbow*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_MotionCommands_mRETURN__ID_marshal_fn(cdrStream& _s, void* _v)
{
  MotionCommands::RETURN_ID* _p = (MotionCommands::RETURN_ID*)_v;
  *_p >>= _s;
}
static void _0RL_MotionCommands_mRETURN__ID_unmarshal_fn(cdrStream& _s, void*& _v)
{
  MotionCommands::RETURN_ID* _p = new MotionCommands::RETURN_ID;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_MotionCommands_mRETURN__ID_destructor_fn(void* _v)
{
  MotionCommands::RETURN_ID* _p = (MotionCommands::RETURN_ID*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const MotionCommands::RETURN_ID& _s)
{
  MotionCommands::RETURN_ID* _p = new MotionCommands::RETURN_ID(_s);
  _a.PR_insert(_0RL_tc_MotionCommands_mRETURN__ID,
               _0RL_MotionCommands_mRETURN__ID_marshal_fn,
               _0RL_MotionCommands_mRETURN__ID_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, MotionCommands::RETURN_ID* _sp)
{
  _a.PR_insert(_0RL_tc_MotionCommands_mRETURN__ID,
               _0RL_MotionCommands_mRETURN__ID_marshal_fn,
               _0RL_MotionCommands_mRETURN__ID_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, MotionCommands::RETURN_ID*& _sp)
{
  return _a >>= (const MotionCommands::RETURN_ID*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const MotionCommands::RETURN_ID*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_MotionCommands_mRETURN__ID,
                    _0RL_MotionCommands_mRETURN__ID_unmarshal_fn,
                    _0RL_MotionCommands_mRETURN__ID_marshal_fn,
                    _0RL_MotionCommands_mRETURN__ID_destructor_fn,
                    _v)) {
    _sp = (const MotionCommands::RETURN_ID*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_MotionCommands_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_MotionCommands_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(MotionCommands::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_MotionCommands_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, MotionCommands_ptr _o)
{
  MotionCommands_ptr _no = MotionCommands::_duplicate(_o);
  _a.PR_insert(_tc_MotionCommands,
               _0RL_MotionCommands_marshal_fn,
               _0RL_MotionCommands_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, MotionCommands_ptr* _op)
{
  _a.PR_insert(_tc_MotionCommands,
               _0RL_MotionCommands_marshal_fn,
               _0RL_MotionCommands_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = MotionCommands::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, MotionCommands_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(_tc_MotionCommands,
                    _0RL_MotionCommands_unmarshal_fn,
                    _0RL_MotionCommands_marshal_fn,
                    _0RL_MotionCommands_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (MotionCommands_ptr)_r->_ptrToObjRef(MotionCommands::_PD_repoId);
    else
      _o = MotionCommands::_nil();
    return 1;
  }
  return 0;
}

